package com.bptn.projects.individual_project.bank_app_controllers;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import com.bptn.projects.individual_project.bank_app.AccountBalance;
import com.bptn.projects.individual_project.bank_app.Bank;
import com.bptn.projects.individual_project.bank_app.Transaction;

public class TransactionController extends Controller {
	public TransactionController(Bank bank) {
		super(bank);
	}

	private static boolean transactionIDExists(int id, Bank bank) {
		// check for same id in other transactions in database
		List<Transaction> transaction = bank.getAllTransactions();

		return transaction != null && transaction.stream().anyMatch(trans -> trans.getId() == id);

	}

	public static int generateNewTransactionID(Bank bank) {
		// use Random object to generate a number between 10,000 and 99,999
		// check for uniqueness of number generated by searching for
		// same number in other transactions in database
		// return generated number
		Random random = new Random();
		int id = 0;
		do {
			id = random.nextInt(100, 100000);
		} while (transactionIDExists(id, bank));
		return id;
	}

	public List<Transaction> listAllTransactionsForAccount(AccountBalance account) {
		// loop though bank's transactions for anyone with same account number
		// return it
		ArrayList<Transaction> result = new ArrayList<>();
		for (int i = 0; i < getBank().getAllTransactions().size(); i++) {
			Transaction current = getBank().getAllTransactions().get(i);
			if (current.getAccountBalance().getAccountNumber() == account.getAccountNumber()) {
				result.add(current);
			}
		}
		return result;
	}

	public List<Transaction> listTransactionsForAccountPeriod(AccountBalance account, LocalDate start, LocalDate end) {
		// loop though bank's transactions for anyone with same account number
		// filter by start and end date
		List<Transaction> forAccount = listAllTransactionsForAccount(account);
		return filterByPeriod(forAccount, start, end);
	}

	public List<Transaction> viewAllAccountByPeriod(LocalDate start, LocalDate end) {
		// loop though bank's transactions
		// filter by start and end date
		return filterByPeriod(getBank().getAllTransactions(), start, end);
	}

	private List<Transaction> filterByPeriod(List<Transaction> forAccount, LocalDate start, LocalDate end) {
		Iterator<Transaction> iterator = forAccount.iterator();
		while (iterator.hasNext()) {
			Transaction next = iterator.next();
			if (!(next.getTimeOfTransaction().isAfter(start.atStartOfDay())
					&& next.getTimeOfTransaction().isBefore(end.atTime(23, 59, 59)))) {
				iterator.remove();
			}
		}
		return forAccount;
	}
}